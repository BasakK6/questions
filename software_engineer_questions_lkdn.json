[
  {
    "title": "Why do you want to work for our company?",
    "answer": "Interviewers ask this question because they want to understand why you are interested in this role at their company and how your goals can solve their needs. When these things align, it’s usually a good match for both parties. \n\nSample Answer: I have been building cloud-based SaaS products for a long time and I have a lot of experience, having learned important lessons as the field has matured. It is exciting to see a company such as yours, with its rich pedigree in the enterprise on-prem space, venture into the cloud SaaS area. I have led products that have gone on to serve multiple purposes. For example, when I worked for a company that focused on athletics, I led the design and implementation of a product that helped folks track their runs. It created a heatmap so people could track where they ran. Placing their runs in context of a physical terrain made our product different, as did the emphasis on fitness where we tracked how many calories they burned. I added features where people could invite their friends for runs, which created community. As you can see, I have a proven record in being inventive in design and iterative in innovation. My experience, coupled with your market presence, makes for a winning combination. I can add value right away helping your platform scale. And, your products are exciting for me to try out my ideas to scale for a cross-section of customers. \n\nWhy this answer worked well: It provided a crisp career backstory. It explained what’s appealing about the company and the role. It detailed how a partnership could be mutually beneficial.",
    "category": "Software Engineer Questions"
  },
  {
    "title": "What kind of tech team dynamic do you excel in?",
    "answer": "Interviewers ask this question to evaluate culture fit. Some companies have a top-down culture where leadership prescribes and employees execute. Others have a more democratized, bottom-up culture. This question is one way to determine whether you’re a match. \n\nSample Answer: I am coming into this interview process as a very experienced candidate. I started out my career at a company that was very methodical and top-down, and over my career I have seen innovation occur in a very decentralized bottom-up approach. Managers, in this later context, are mentors and colleagues as much as they are bosses. I have tried to shape and gravitate towards team dynamics where senior leadership sets clear parameters for conduct and goals to achieve—without micromanaging all the execution details. In effect, I aim for the best of both worlds. The overall dynamic should be geared towards innovating, hopefully in a fail-fast incremental basis that enables us to delight our customers and allows us to learn from their feedback. This makes work exciting and meaningful and would keep our offering fresh. \n\nWhy this answer worked well: It showed two contrasting choices with clear tradeoffs. It used the question to demonstrate experience. It made the case that you don’t need to choose between the two options and that both can co-exist and help teams succeed. It closed with a focus on tangible outcomes dedicated to the customer, which is a great touch—especially with an approach geared towards learning.",
    "category": "Software Engineer Questions"
  },
  {
    "title": "Let’s say there are two kinds of tech workers: the innovators and the executors. Which of these categories do you fit into?",
    "answer": "Interviewers ask this question to evaluate your career goals and match them to what they feel the ideal candidate needs to be. More than culture fit, this could be a way to gauge fit for this role or other roles that may be open. \n\nSample Answer: I believe that engineers need to have a sense of the larger product vision. Additionally, they also need to understand what it takes to execute and get an idea from 0 to 1. At present, I still want to stay close to the execution since I enjoy the thrill of iterating on a product, getting smaller features out, receiving feedback, and finally getting an MVP out the door to push growth and revenue. Eventually, I want to lead a suite of products that will help our strategic vision of creating a connected workforce and establish a track record of delivering products that will set me up for success. I feel like I can help your company accomplish its product roadmap and boost my own career in the process. \n\nWhy this answer worked well: The candidate co-opted both approaches and still made an explicit choice. It explained why one approach was chosen over the other. The candidate framed the choice as part of a larger career journey rather than a random choice.",
    "category": "Software Engineer Questions"
  },
  {
    "title": "How do you measure success for yourself technically?",
    "answer": "Companies will give you feedback using different methods like annual reviews, ongoing areas of growth, etc. However, in an increasingly self-directed workplace, companies want engineers to set measurable goals for success. This question aims to assess how self-directed you can be. \n\nSample Answer: I think an example will explain both how I focus on the customers and how helping them defines my success. In my roles as a professional services engineer, I have to make our products more configurable so that customers can create settings that meet their needs. Since our products are inherently very flexible, it makes no sense that all customers are forced to use the same settings. I have built tools that allow customers to easily toggle options and make the tools work the way they want. I measure my success in flawlessly deploying these features in a timely fashion and ensuring that a diverse set of customers adopt our tools, which leads to customer loyalty and growth in revenue. \n\nWhy this answer worked well: The candidate was customer-centric, which is an increasingly desired quality in tech candidates. The candidate explained product capability and how the work made more of it possible for the end users. The success criteria were measurable.",
    "category": "Software Engineer Questions"
  },
  {
    "title": "Why do you think that technical teams need to be inclusive and represent a variety of backgrounds?",
    "answer": "Hiring managers increasingly realize that teams that include diverse perspectives are both fairer and more successful. This question will test your awareness of this issue as well as how you could contribute to it. \n\nSample Answer: Inclusivity is about ensuring your team and its products reflect the world we live in and the improvements we wish to make. In my previous role, I led a team of engineers to build chat features so customer service divisions could easily type messages in English. We had a new team member join whose spoken language was not English. Using her insights, we were able to build a new feature that auto-completed messages for non-native English speakers so the tool becomes more accessible for them. This is what inclusivity means to me: inclusive teams make more inclusive products, which means happier customers and more growth and revenue. \n\nWhy this answer worked well: It defined the term clearly right away. It showed how using inclusivity in a team as a bridge to products and customers makes an example more relatable. It married the definition of inclusivity with measurable outcomes, which is a great way to close out the answer.",
    "category": "Software Engineer Questions"
  },
  {
    "title": "When you join a new technical initiative, what is the first thing you do?",
    "answer": "The first few weeks for a new employee are critical. They are an opportunity to learn and build relationships. This question will help assess how the candidate sizes up the challenge ahead of them were they to get the job. \n\nSample Answer: Based on my research, I have found that your company prefers for incoming engineers to get their hands dirty right away. They learn by joining existing initiatives, shadowing engineering leads and completing tasks that enable them to learn the stack and forge relationships. I will find an area that is short of help, and I am optimistic that such needs exist given your company’s four key growth areas. Having done that, I’ll also help debug and scale existing capabilities. That will give me a sense of the core and tech landscape while adding value as well. Upon demonstrating my capabilities, I will start setting goals to own specific functionality that I can take from 0 to 1, with the trust of the team that I will have earned in my early days. \n\nWhy this answer worked well: It was based in the company culture, which showed prior effort to gain knowledge and research. It demonstrated an onboarding strategy crafted to produce near and long-term wins. It ended on an aspirational note about ownership.",
    "category": "Software Engineer Questions"
  },
  {
    "title": "If you had to pick between owning the entire process for one product versus contributing to multiple products at once, how would you decide?",
    "answer": "This question deals with both culture fit and how you approach choices. There is no right or wrong answer as such, but you do need to show that you make choices thoughtfully and deliberately. \n\nSample Answer: Contributing to multiple projects at once had given me a great perspective on the business as a whole and offered me the chance to develop relationships across functions and share responsibility with others on my team. On the other hand, I do see how owning a project puts you in a leadership role, and while the broad visibility may vary depending on the project, it is a chance to build domain expertise. Because I have done a lot of my work so far in the former model, I now feel prepared to own something and lead it to fruition. Based on shared learnings and the diversity of projects I have worked on, I can pour all of that into something I can build from the ground up. I know that the company has recently acquired several subsidiaries, so having someone come in and own the technical integration work is important, and I look forward to that challenge. \n\nWhy this answer worked well: It shaped the choices in terms of impact and contributions rather than focusing on the candidate’s own needs. It explained previous work and how the new challenge represents a break as well as a continuation of the candidate’s career goals. Ending on a note about how the candidate’s choice helps the company mission was a smart approach.",
    "category": "Software Engineer Questions"
  },
  {
    "title": "If you were stuck in solving a technical problem, how would you ask for help?",
    "answer": "This question will help assess how you will relate to other technical experts. The interviewer is looking for technical judgment combined with relationship-building skills. \n\nSample Answer: Engineering work can be very context-sensitive but still have a high impact. That is, I may have a unique understanding of something I am building, like a system architecture or code. Still, it could impact others if I am stuck or get things wrong. In that event, if I am stuck, who and when I ask for help depends on how time-sensitive the task is, where I am in the project life-cycle, and whether I have exhausted all the tools available to me. Let’s assume that I am stuck in system architecture. I’d make sure I have a well-thought-out diagram and come prepared with options and specific questions. If it is code, then it gets tricker since it is hard to debug someone else’s code. In that case, I’d want to isolate the specific area that is incorrect, present the expected and demonstrated behaviors, and seek out debugging tips. Once I am unblocked, I would document my decisions and outcomes so as to create a living resource for anyone else who has the same issues down the line. \n\nWhy this answer worked well: It showed how to manage working with diverse technical issues as well as the impact of not asking for help. It talked about what to do before seeking help and tailored it to the task at hand. It showed that paying it forward, in case someone else needs help, is professional courtesy and will help the team scale as well.",
    "category": "Software Engineer Questions"
  },
  {
    "title": "How would you explain concepts like polymorphism and inheritance to a computer science student?",
    "answer": "Interviewers ask this question to assess your ability to explain technical concepts. \n\nSample Answer: I’m going to assume I’m explaining these concepts to someone with working knowledge of them, so I’ll use an example to drive home how they can be applied. Inheritance lets us inherit attributes and methods from another class. Polymorphism uses those methods to perform different tasks. This allows us to perform a single action in different ways. For example, think of a superclass called Season that has a method called areDaysHot() which prints out “It depends on the day”. Subclasses of Season could be Summer, Winter, Fall - And they also have their own implementation of areDaysHot() (to reflect that summers have hot days, winters have cold days and fall days are a mix.) Now, we need to use the Season class and create objects for the sorts of days we see depending on the season. As an example, we can create a Summer object and call the areDaysHot() method which prints out “The Days are hot”. Season mySeason = new Season();Season midJune = new Summer(); This is polymorphism in action. The same method - areDaysHot(), in this case - produces different output depending on which object is used to call it. So, mySeason uses the parent class version of areDaysHot(), while midJune uses the inherited version and therefore produces different output. The output will be as follows: mySeason.areDaysHot() produces “It depends on the day”WhilemidJune.areDaysHot() produces “The days are hot” Additionally, I mentioned earlier about Fall. Since the days are often a mix of hot and cold, you could just define a class Fall extends Season without a areDaysHot() function, in which case an object defined for the Fall class will invoke the parent class function. So, as you can see, we have reused a core capability and repurposed to a different, more derivative use case. This is a great way to keep your code manageable and more intelligent. Does that help explain these concepts or would you like me to elaborate on anything specific? \n\nWhy this answer worked well: The candidate explicitly called out what the intended audience was. The candidate shared a relatable example to demonstrate understanding of the concepts. The candidate asked if the interviewer had any questions, which is always a good thing since it allows them to course correct.",
    "category": "Software Engineer Questions"
  },
  {
    "title": "How would you explain a web service infrastructure to a technical audience with a software background but limited system-level knowledge?",
    "answer": "This question will help assess how you will relate to individuals with a diverse range of technical depth. The interviewer is looking for technical judgment mixed with human relationship-building skills. \n\nSample Answer: The web service architecture consists of several key components, and we will incrementally demystify it by way of several concepts that will serve as building blocks. A web server is a piece of hardware that responds to a user request with data. It could be as simple as loading static files from a computer. A database—known in technical lingo as the “persistence layer”—is a resource for the web server to persist, or store, data. Even though these two technologies work together, they sit on separate computers so as to not compete for resources. From an instrumentation standpoint, you will want to make changes to the database by inserting data into it and reading data from it. This is where you’d use SQL. SQL covers the gamut from data transfer to creating databases to setting permissions. You can use SQL in MySQL, SQL Server, etc. From an operational standpoint, the front-end, which could be a browser, makes a request for information to the back-end, which is the web server. For example: This is a simplistic version of what happens when you search for “cat food” from Amazon and a bunch of options show up. Since so much of our web architecture depends on data storage, it helps to understand your options vis-à-vis databases. If you plan on using data arranged in neat categories —think key-value pairs or tables —then you want to use relational databases (RDBMS) like MS SQL Server, IBM DB2, Oracle, MySQL, and Microsoft Access. The data in RDBMS is stored in database objects called tables. A table is a collection of related data entries and it consists of columns and rows. Databases like Cassandra and MongoDB are great for unstructured data in which case performance would be a predominant concern. It's especially great when the data structure is going to evolve over time, as its schema-less operations allow you to update the data on the fly. The backend, which is the web server, then calls the database to get data, and possibly run some logic on that data and return the output to the user. Some context here: since we are discussing data transfers, I’ll provide a quick overview of HTTP. HTTP is a protocol which allows the fetching of information, such as HTML documents. It enables data exchange on the Web and it’s a client-server protocol, which, as I indicated, means requests are initiated by the recipient, usually the Web browser. Clients and servers communicate by exchanging individual messages. The messages sent by the client are called requests and the messages sent by the server as an answer are called responses. So, to summarize, a web service architecture involves the client (i.e. the user seeking the information) and the server (which has the information), and the server consists of the webserver and database. \n\nWhy this answer worked well: It set context for how the web service architecture will be described. It explained how concepts like web servers and databases connected together as part of the larger web service architecture. It associated these concepts with a real world example. It tied the whole idea together as a narrative in the end.",
    "category": "Software Engineer Questions"
  },
  {
    "title": "What would you do if asked to take on a problem where you did not have the technical skills?",
    "answer": "This question will help assess how you will handle the “skill gap” engineers are often confronted with. \n\nSample Answer: Unless there is an explicit set of constraints, I will assume that the task at hand is to implement a web-based capability. And the skill gap in question is that of language—more specifically, the language used in the company being one I am not terribly conversant in. Does this assumption work as a starting point before I dive in? I would examine the difference in the two languages; the scope of the project; the timelines; how much old code I could build on; and whether the work rests solely on me or whether I can tag-team with others. Based on all my findings, I would create a technical spec and system design that would contain assumptions and call out technical decisions. I would have a peer or senior leader validate my assumptions just in case my technical gaps have led me astray. As I move forward, I’d check in every week or two to make sure I am executing as expected and then become more independent. I’d be sure to align with experts in the new language so as to build my knowledge and expertise in the context of the intended outcome. Throughout the process, I would focus on the end result and what skills would take me—and the work itself—toward that end goal. That way, I will grow my skills in a way that maximises my impact as well as collective success. That will enable me to leverage available resources in the team as well to close my gap. \n\nWhy this answer worked well: It pointed out an assumption and paused to allow the interviewer to interject and provide further guidance. It called out all the variables that will drive decisions. It anchored the strategy on the needs to stick to the outcome rather than just building expertise.",
    "category": "Software Engineer Questions"
  },
  {
    "title": "Tell me about the most challenging technical problem you have solved?",
    "answer": "This question will help assess how you judge difficulty/complexity, your approach to it, and how you improvise and execute. \n\nSample Answer: A challenging problem arose when I was one of the leaders of a cross-functional team. We had to migrate our infrastructure from on-premise to AWS cloud. There were several reasons why this initiative was important for our company’s success. First, our front-end and back-end setup made it increasingly difficult for us to develop and deploy at scale with the costs of onsite IT - and with limited redundancy to boot. We also used data centers with a hardware-based load balancer and LINUX hosts running a standard configuration of Apache reverse proxy and Tomcat, and with one application called JavaStore. JavaStore contained all the code that anyone would ever interact with as an internal stakeholder or external customer. It was connected directly to an Oracle DB using JDBC and to other Oracle databases with links.Then, to make the challenge even more complex, we had two single-point-of-failure vulnerabilities. The first was that, since everyone was contributing to the monolithic JavaStore code base, it was very hard to make changes to it. And rather than CI/CD, even minor UI changes required weeks of iteration. The second was that since debugging was equally time-intensive, and tracking down simple memory leaks required several teams to abandon their work and firefight. Similarly, the database was also monolithic, and when this went down everything went down, so we had to vertically scale each time we hit a peak. With the vulnerabilities in mind, our solution had three parts. The first was moving to a cloud-based microservice infrastructure. I set expectations that microservices were not automatically horizontally-scaling abstractions but would depend on scalable persistence. Our initial offering was the classic microservice infrastructure - an elastic load balancer that supported a proxy layer, which then handled dynamic routing to the gateway API. The gateway API, as the name suggested, called targeted microservices. Since we had pushback from IT around persistence, I decided to replace the monolithic DB discussed above first. The new architecture, which was heavily influenced by Netflix’s then-groundbreaking model, involved building Java-based client libraries for data access. That meant a cache client so as to take a load off the service and DB. As a result, hits to the application were first supported by the cache which, upon failing, hit the service. The service, as expected, then called the DB and backfilled the cache. This prevented the DB from going down when the next series of requests arrived, often only a few milliseconds later. Also, it helped us address the monolithic DB issue since we did not need to throw more hardware to prevent crashes. The C-Suite that was initially skeptical started coming around. They were tired of cutting checks to throw good hardware after bad system design. The second part was fixing the front end, which involved several advances and retreats. Since our previous service was monolithic, we initially underestimated that calls from one service to another added vulnerabilities to our process. We had to account for network latency and the possibility that not every service was bug-free just because it was smaller. This often led to a cascading failure when a critical service failed, and we ended up with all the downsides of a monolithic architecture. We addressed this by using fault-tolerance testing for critical services.. Because of this, we had near 100% uptime for our core service that customers used to place orders. This fix helped address the single-point-of-failure issue. The third part was to convince our leadership that we did not need to be consistent in our back-end data across all our data stores. They underestimated the time/effort involved in replicating content across availability zones. As a result, even if not all writes were read back immediately, even if one write failed, we would count it as a failure. After multiple evidence-backed demos of fail-cases, my engineering counterpart and I convinced them to support availability as a success metric over consistency. This also aligned with the business goal of ensuring that the core retail business was always online, even if not all the merchandise was consistent across all services. In our implementation, we used Cassandra to write to one node, which then orchestrated other writes across other nodes. You can now pull these pieces together, and I can dive into those details if you wish. But as you can see, overall we were able to meet this complex challenge and deliver a solution that kept our company moving forward. \n\nWhy this answer worked well: It explained the challenge’s complexities, the evolution of the solution, and how it was an improvement on the status quo.It called out the skeptics, ranging from the C-Suite to IT.It closed by pointing out the work is not quite done and laying out a solution path.",
    "category": "Software Engineer Questions"
  },
  {
    "title": "Explain how you would design a ride-sharing app.",
    "answer": "This question will help assess your knowledge of web infrastructures and the ability to implement a widely-used functionality. \n\nSample Answer: A ridesharing service enables you to request a car to come and pick you up, so you need some ability to have real-time data move back and forth so the driver can find you and vice versa. Right off the bat, let’s set some API design guardrails on the functionality: The overall architecture must have high availability and low latency. We must also account for the fact that the system could be read-heavy; as a driver and a rider, you spend more time looking at the app to do things like tracking your ride and getting directions rather than adding content such as requesting, accepting rides or making payments. For this timeboxed session, I will focus on 3 aspects: Finding and matching drivers and riders, and matching them to each other; this is the core business. Maps and location, so riders and drivers can see each other on a map, determine their ETAs, and establish their trip trajectories. Storage, where they can persist details like trips so riders can retrieve them if needed and drivers can get paid. I wanted to start from the third point regarding storage, since the ability to store data is the foundation to business operations as well as data analysis for future strategic investments. Since the trip data has to be as current as possible, I’d retain it in data centers as close to the trip location as possible. This will also help with data localization and physical safety. I’d also have backups for the inevitable disaster situation. We can sync the trips eventually since we want availability over consistency. In order to ensure we can retrieve the data quickly - remember, what we said around system guardrails at the outset - I’d go for a low latency DB like Cassandra. On the other hand, for data analysis, you need several permutations of data against which you could run expensive queries. Latency is not as big an issue here; completeness is. This is where, for example, a Hadoop warehouse would come in. But given the pressure on the service, I’d want to implement caching intelligently so as to use resources more prudently. Any questions before I jump in? I’d warm up the caches and refresh them any time there was a miss. I’d spray my writes across availability zones for redundancy but would read locally. In terms of caching, it would mainly be static data, like street landmarks, but would avoid caching driver locations because those refreshes would be too frequent and expensive. This is where something like REDIS would enter the picture. \n\nWhy this answer worked well: It immediately defined how the service would work, the existing problem, and the parts that would be solved. It showed awareness of how choices would impact product usage (like data localization), and it included an explanation of trade-offs, (like availability vs. consistency). It explained how decisions were being made and sought feedback to make sure the interviewer was clear.",
    "category": "Software Engineer Questions"
  },
  {
    "title": "Explain how you’d design Twitter and the system tradeoffs involved.",
    "answer": "This question will help assess your knowledge of web infrastructures and the ability to implement a widely-used functionality. \n\nSample Answer: Twitter has a lot of features and activity. For the purpose of this exercise, I will focus on designing and architecting the timeline, which is the feature you use by default when you first open Twitter, where tweets from everyone you follow show up. Let’s construct what a backend for the Twitter timeline could be like. Every user on Twitter would have three tables. First, the user’s own Twitter home page. You could think of my Twitter timeline as a table with IDs of users who I follow and their tweets. For now, let’s not worry about how the tweets are ordered or which users are prioritized. We can call this the “Timeline Table.”Second, every tweet I have ever sent would be in a table of its own. We can call it the “Tweets table.”Third, I’d have a table of all the other Twitter users I follow. We will call it the “Follow table.” With this context in mind, let’s populate the Timeline table. We can start by running a SELECT query that joins my Follow table with the Tweets table of every user I follow. This would be a very expensive query. When you account for the fact that people are following or unfollowing others in real time and sending out tweets, this gets even more complicated. Also, when you account for the number of users on Twitter, there is no way something like this would scale. So, in my preferred design, I will optimize for availability over consistency. Here is how I’d build the architecture: Once I type my Tweet and hit SEND, my tweet would hit a gateway API, via a PUT or POST call. Then, you’d have an ELB, which would route your call to a server that can support you. As we keep developing our solution, let’s assume we can use the “fan out” architecture, whereby the tweet lands in an in-memory database. This would replace the Timeline table in our structured database above. In order to build redundancy, we’d have multiple REDIS clusters for several copies of each timeline. Just so we don’t have to keep scaling vertically and horizontally, we will only want to keep these copies for highly engaged users. Take edge cases into considerations. For example, if someone with millions of followers were to send a tweet, that would lead to a re-computation of those millions of followers. This would be neither scalable nor practical. In order to address the edge cases, we need to borrow from both approaches we have looked at so far. We could leverage the REDIS approach while also inserting tweets from any applicable highly-followed users at run-time. So, at this point we have a sound architecture that allows for availability and factors in various kinds of timeline use cases. I’m happy to dig in further if there is any specific aspect you’d like me to elaborate. \n\nWhy this answer worked well:It clearly defined “how” the service works from the start without jumping into solution-mode too quickly. It defined the problem early on and identified the solution parameters. It picked and ruled out solutions and explained why, but it also showed how possible solutions would or would not work in the real world. It explained how specific solutions would need to be improved and suggested how to make those changes.",
    "category": "Software Engineer Questions"
  },
  {
    "title": "Give me an example of how you’d secure data so that it cannot be misused or inappropriately accessed.",
    "answer": "This question will help assess your understanding of how data can be protected using a proven security technique. \n\nSample Answer: Given how much data breaches are in the news, I wanted to set some context. Assuming that there is always a chance that someone will get a hold of data that they are not supposed to, I’d like to render the data useless to bad actors. I have been studying encryption because this technique allows you to protect data that you store as well as data you transport. My strategy would include: A good encryption algorithm, properly applied; Protection of the secret key; Symmetric keys that are never to be reused; Public keys to be distributed in a certificate to prevent interception attacks; Ways to protect metadata One consideration before we begin - just because the data-sharing channel is cryptographically protected, we shouldn’t assume that the data can be shared carelessly. Cryptography intercepting proxies do exist and can be used to mine data. It is exactly for this reason that Encryption keys must be rotated on a regular basis. Cryptographic algorithms are continually being analyzed and vulnerabilities can be found. Now, let’s execute our strategy. Since key management is important, let’s dig in there. Symmetric keys must be carefully protected and good key rotation practices must be followed. Private keys must be carefully protected. Public keys must be accessible to anyone and the emphasis is on access, so no protection is needed. Still, they must be embedded in a certificate. Now let's look at the data itself. Data at rest ideally requires envelope encryption, which means a key hierarchy is established. Never encrypt all data in a database with the same key. Data in motion requires the use of HTTPS/TLS. Very sensitive data must still be encrypted—even over an encrypted connection. Data being shared with other parties needs to be processed with asymmetric encryption so that only the intended recipient can read it. \n\nWhy this answer worked well: It tied the need for the solution to real-world events. Engineering is a means to an end, and that context matters. It laid out the key aspects of the solution at the get go, which is critical. It looked at the solution through the lens of several aspects. Starting with keys and then moving to data was a smart call.",
    "category": "Software Engineer Questions"
  },
  {
    "title": "Tell me about a time you disagreed with a fellow engineer and how that issue was resolved.",
    "answer": "This question will help assess what it is like to work with you, especially in the context of difficult situations. \n\nSample Answer: This happened a year ago. I disagreed around the scope of a major system redesign with a new engineer, who was junior to me. Every few years, our company would redesign our customer-facing login experience. This was a chance to add new features, make it compatible with new devices and broaden our reach. I was the project lead, and having paid my dues fixing smaller components of previous designs, this was my chance to own the end-to-end architecture of the system as a whole. My partner was a brand new engineer. He had graduated from Carnegie Mellon just months before. I had taken him under my wing since I admired his intelligence and pluck as well as the fact that he had succeeded in an area where I had not. I helped him ramp up, and we then started tackling the system design. We immediately had a different strategic view. I wanted to fix as many bugs as possible and then add new features. Jake, on the other hand, did market research that showed that we could entice new customers and juice up revenue by adding new features. In his mind, the bugs were benign and, by now in the minds of our customers, had settled in as quirks, so there was no need to chase after them as our competitors lapped us. During one scoping session, he made a remark that engineers like me are often too tied to the old system they built. I countered that people who have never built a system often underestimate the tradeoffs around maintenance and innovation. We needed to improve the app, but what would be better was to see what the best mix was. What features could we add that could fix the maximum bugs, and what bugs could we fix that would bring new features along with them? So, we went back and did our homework. Jake took the first task, while I took the second. Our combined research led to a clearly defined MVP that improved the product stability as well as added key new capabilities. Our new product design won rave reviews, and both Jake and I developed a new respect for each other. \n\nWhy this answer worked well: The candidate thoroughly explained the situation, the problem and the relationship between the two players. The candidate called out the contrast between the two choices. The candidate used language to indicate that a key juncture in the conversation was coming, which allowed the interviewer to process the information. The candidate explained growing as an individual and as a leader—from being the idealistic engineer to someone responsible for progress, and from being a mentor to treating Jake as a stakeholder.",
    "category": "Software Engineer Questions"
  },
  {
    "title": "Tell me about a time when insights about the industry or customers impacted your technical execution.",
    "answer": "This question will help assess your ability to listen, solicit feedback and improvise based on new information. \n\nSample Answer: I worked for a company that built GPS systems for farmers. They used our systems to chart out their field maps and spray fertilizer on their fields from small planes. This allowed them to mix the fertilizer with other chemicals that would improve soil health and protect plants from insects. During our periodic redesign, I was of the opinion that we could add more options to our menu. That way, our tools would be more differentiated and frankly, I’d look like a leader with fresh ideas. One of our reps suggested bringing an engineer along on a sales trip in case the customers had any questions. I figured it would be a great chance to learn how our product gets used in real life, so I tagged along. The trip to the Midwest was illuminating. I was able to interact with people outside of the typical West Coast tech crowd and product engineers. During the customer interaction, I showed the farmers all the amazing features and the environmentally friendly LED. They seemed unimpressed. The farmers told us that it was unhelpful to have new features overcomplicate the display. Using so many buttons while flying a plane was very difficult since it took their eyes off the field and put them at risk. I felt like all my hard work had gone to waste. And just then, from the back, someone said that it would be nice if these features were available without having to press a button. They would prefer if we used voice-recognition. And just like that, we figured out a way to make our product even more marketable. We could design two different SKUs: one with buttons and the other with voice commands. By giving customers different choices, we could capture a wider market. This product improvement would not have been possible had I not listened to the customer and incorporated their feedback. That insight has stayed with me to this day. Now that I’m more senior, I am striving harder to engineer products that are more accessible and inclusive. \n\nWhy this answer worked well: It started with a humanizing touch, which showed sincerity. It explained the product in terms of customer needs. It showed empathy by recognizing that customers may have different perspectives that need to be considered. It closed with an eye towards inclusivity and using this experience as a lesson to show maturity and humanity.",
    "category": "Software Engineer Questions"
  },
  {
    "title": "Tell me about a time you had to push back on an unreasonable request from an executive or customer.",
    "answer": "This question will help assess your ability to process feedback and hold your ground as needed. \n\nSample Answer: I was the tech lead at a digital tech firm and we would design interactive experiences for bigger companies. One such project involved creating an activity dashboard for the users of a retail company by leveraging their Facebook data with permission. The dashboard would contain information such as their top friends or their most visible social posts. It was a great way to drive social engagement and make the brand hip in the eyes of the tech-savvy younger demo. We learned how to use the Facebook APIs - and this was during the early days of Facebook when documentation was sparse. We figured out how to get the data from Facebook by understanding how their API rate-limiting worked and how the data schemas were set up. After weeks of coding, testing and working with the design team, we had a prototype ready. And then, the customer asked us to do the exact same thing with Twitter. At the time, Twitter was too new and did not have diverse enough data to justify the effort. This would require significant changes to our backend data processing that we could not implement without delays and going over-budget. I was almost certain that all the API calls would slow down the experience and we’d lose the impatient younger clientele our customer was hoping to entice. I felt that if we allied with the client’s IT team, we may have success making the case for delaying this additional request for v2. This additional request probably came from someone who did not have the technical background, and if the client heard it from an insider, they may be more likely to come around. Sure enough, when the client heard this assessment as a team effort from both engineering teams, they understood and accepted that the new request would need to come in as a phase 2 effort. \n\nWhy this answer worked well: It set the stage by explaining the problem, the stakeholders and the context of the work - which otherwise would not be intuitive for the interviewers. It cleverly highlighted how the work was innovative. It told a story about pushing back, building alliances, and ultimately resolving the problem.",
    "category": "Software Engineer Questions"
  },
  {
    "title": "What do you think an ideal product-engineering relationship should look like?",
    "answer": "This question will help assess your ability to work with a key engineering partner. \n\nSample Answer: Product management and engineering are like pieces of a puzzle; incomplete without each other. But often it takes a bit of an effort to see how they best fit together. Product management sets the parameters of the innovation: what we are building, why we are building it, who we are building it for, and how we would measure its success. Engineering has to provide the “how”: the instrumentation, the personification of the design, the logistics around the building, and the iterations in which smaller chunks can validate the progress towards the whole. Ideally, you want a relationship where product management is in close contact with the end-users and brings that perspective to the engineer—with enough technical judgment to understand what is doable. Engineering should be technically sound enough to execute as well as provide product management choices and feedback based on technical tools available. On an ongoing basis, the two arms of the team should work together to validate progress, rule things in or out and measure outcomes against goals and the larger product vision. \n\nWhy this answer worked well: The candidate used an analogy to bring the ideas to life, demonstrating the ability to explain complex concepts in a simple manner. The candidate explained the optimum scenario where the two roles make each other successful. The candidate provided an operating template by calling out how the two roles can interact on an ongoing basis.",
    "category": "Software Engineer Questions"
  },
  {
    "title": "How would you drive alignment among senior leadership to help accelerate decisions?",
    "answer": "This question will help assess your ability to influence leaders so as to drive impact for the technical work you wish to do. \n\nSample Answer: Software development has changed significantly in the last 10 years or so. We have had products grow incrementally in sprints so that companies can innovate continually, fail quickly, adapt rapidly and surprise customers constantly. What this has meant is that engineering teams have become bottom-up and more siloed. While this has helped create amazing products, senior leadership has become more removed from the details, and then when it comes time to make decisions, things slow down for lack of shared context. Here are some techniques I’d use to help accelerate decision-making: Ongoing demos on how the product is iterating and growingMetrics on product success like adoption numbers, cost of data storage, and new feature usage. Delivery timelines and changes based on tool choices. I’d use biweekly lunch-and-learn sessions and one-pager memos to ensure that I am building a critical mass of shared knowledge so that come decision-time, we all have common context to reference. As critical decisions come up, I will identify key players, their concerns and needs so as to craft an alignment strategy that speaks to those needs. Since our products keep evolving, so must our methodology to help drive decision-making. \n\nWhy this answer worked well: It set the stage for how modern tech work has changed including its pluses and minuses for strategic decision-making. It provided examples of how decisions would be made and also why those approaches would help. It closed by making the point that the work to produce tech products has to evolve to help drive the products themselves.",
    "category": "Software Engineer Questions"
  },
  {
    "title": "How do you measure success in an engineering project?",
    "answer": "This question will help assess your ability to work towards outcomes and adhere to missions and goals. \n\nSample Answer: Measuring success for tech products is complex - not because it is impossible, but because there are so many different approaches tailored to different scenarios and audiences. The key is to choose a mission, and let that mission drive the product’s strategic and tactical success metrics. Let’s assume that we are talking about a product like LinkedIn groups. LinkedIn’s mission can be thought of as driving engagement between and among employers and workers to ensure as many matches as possible, which leads to a growing and dynamic economy and workplace. To that end, the success of LinkedIn groups can be strategically measured in terms of: The number of groups and their growth rateQuality of engagement, which are things like how long people stay in groups and how often they return. More tactically, I’d look at things such as: The number of members per group and their growth rateThe number of posts on things like jobs, shares, and invites. And finally, I'd also look for things like if people who get jobs through the Groups feature are coming back to post jobs, and if they are referring their friends to those groups. The purpose of these groups is to grow engagement and employment and then have that growth flow back to the groups themselves. As I build technical features, I would look to see how my architectures and features drive such numbers and innovate accordingly. \n\nWhy this answer worked well: The candidate sets the stage for why measuring success can be challenging, and then makes the case that success is driven by the mission and data. The differentiation between strategic and tactical metrics was a good touch as were the examples. It smartly tied in future engineering decisions to specific growth metrics, showing a customer orientation that is critical.",
    "category": "Software Engineer Questions"
  },
  {
    "title": "What is the mix of technical and management qualities you look for in engineering leaders and managers?",
    "answer": "This question will help assess your ability to work with different types of leaders who have some degree of authority over you. \n\nSample Answer: I think of a manager as a multi-dimensional leader. A manager would be part coach part mentor. As a mentor, a manager would help guide me and build my skills. As a coach, their responsibility would be to extract the best out of me while also holding me accountable. So, I’d expect a combination of both incarnations. This relationship would vary depending on the company, the work culture, how thinly spread the manager is, the stage of the project, and the uniqueness of a specific situation. This is where honest and transparent communication, which is the foundation of a trust-based relationship, comes into the picture. To that end, it is my own responsibility to ask for help early, set clear expectations, communicate crisply and make sure I keep my manager in the loop at all times. This is critical since I may have more brass-tacks awareness than my manager, but my manager may be more organizationally connected than I could be. That way, the relationship is mutually beneficial. \n\nWhy this answer worked well: The candidate used a relatable analogy to explain the manager’s role. The candidate emphasized the need for communication so as to avoid characterizing the relationship as a one-way dependency. The candidate smartly explained how someone and their manager could use each other as force multipliers.",
    "category": "Software Engineer Questions"
  }
]
